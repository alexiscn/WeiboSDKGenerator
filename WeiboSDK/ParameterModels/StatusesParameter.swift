// NOTE: This file is generated by WBSDKGenerator.

extension WeiboSDK {

    public struct Statuses_countParameter {

        // 需要获取数据的微博ID，多个之间用逗号分隔，最多不超过100个。
        var ids: String

        func value() -> [String: Any] {
            var params: [String: Any] = [:]
            params["ids"] = ids
            return params
        }
    }

    public struct Statuses_home_timelineParameter {

        // 若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。
        var since_id: Int64?

        // 若指定此参数，则返回ID小于或等于max_id的微博，默认为0。
        var max_id: Int64?

        // 单页返回的记录条数，最大不超过100，默认为20。
        var count: Int?

        // 返回结果的页码，默认为1。
        var page: Int?

        // 是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。
        var base_app: Int?

        // 过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。
        var feature: Int?

        // 返回值中user字段开关，0：返回完整user字段、1：user字段仅返回user_id，默认为0。
        var trim_user: Int?

        func value() -> [String: Any] {
            var params: [String: Any] = [:]
            if let since_id = since_id {
                params["since_id"] = since_id
            }
            if let max_id = max_id {
                params["max_id"] = max_id
            }
            if let count = count {
                params["count"] = count
            }
            if let page = page {
                params["page"] = page
            }
            if let base_app = base_app {
                params["base_app"] = base_app
            }
            if let feature = feature {
                params["feature"] = feature
            }
            if let trim_user = trim_user {
                params["trim_user"] = trim_user
            }
            return params
        }
    }

    public struct Statuses_mentionsParameter {

        // 若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。
        var since_id: Int64?

        // 若指定此参数，则返回ID小于或等于max_id的微博，默认为0。
        var max_id: Int64?

        // 单页返回的记录条数，最大不超过200，默认为20。
        var count: Int?

        // 返回结果的页码，默认为1。
        var page: Int?

        // 作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。
        var filter_by_author: Int?

        // 来源筛选类型，0：全部、1：来自微博、2：来自微群，默认为0。
        var filter_by_source: Int?

        // 原创筛选类型，0：全部微博、1：原创的微博，默认为0。
        var filter_by_type: Int?

        func value() -> [String: Any] {
            var params: [String: Any] = [:]
            if let since_id = since_id {
                params["since_id"] = since_id
            }
            if let max_id = max_id {
                params["max_id"] = max_id
            }
            if let count = count {
                params["count"] = count
            }
            if let page = page {
                params["page"] = page
            }
            if let filter_by_author = filter_by_author {
                params["filter_by_author"] = filter_by_author
            }
            if let filter_by_source = filter_by_source {
                params["filter_by_source"] = filter_by_source
            }
            if let filter_by_type = filter_by_type {
                params["filter_by_type"] = filter_by_type
            }
            return params
        }
    }

    public struct Statuses_repost_timelineParameter {

        // 需要查询的微博ID。
        var id: Int64

        // 若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。
        var since_id: Int64?

        // 若指定此参数，则返回ID小于或等于max_id的微博，默认为0。
        var max_id: Int64?

        // 单页返回的记录条数，最大不超过200，默认为20。
        var count: Int?

        // 返回结果的页码，默认为1。
        var page: Int?

        // 作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。
        var filter_by_author: Int?

        func value() -> [String: Any] {
            var params: [String: Any] = [:]
            params["id"] = id
            if let since_id = since_id {
                params["since_id"] = since_id
            }
            if let max_id = max_id {
                params["max_id"] = max_id
            }
            if let count = count {
                params["count"] = count
            }
            if let page = page {
                params["page"] = page
            }
            if let filter_by_author = filter_by_author {
                params["filter_by_author"] = filter_by_author
            }
            return params
        }
    }

    public struct Statuses_shareParameter {

        // 用户分享到微博的文本内容，必须做URLencode，内容不超过140个汉字，文本中不能包含“#话题词#”，同时文本中必须包含至少一个第三方分享到微博的网页URL，且该URL只能是该第三方（调用方）绑定域下的URL链接，绑定域在“我的应用 － 应用信息 － 基本应用信息编辑 － 安全域名”里设置。
        var status: String

        // 用户想要分享到微博的图片，仅支持JPEG、GIF、PNG图片，上传图片大小限制为<5M。上传图片时，POST方式提交请求，需要采用multipart/form-data编码方式。
        var pic: Any?

        // 开发者上报的操作用户真实IP，形如：211.156.0.1。
        var rip: String?

        func value() -> [String: Any] {
            var params: [String: Any] = [:]
            params["status"] = status
            if let pic = pic {
                params["pic"] = pic
            }
            if let rip = rip {
                params["rip"] = rip
            }
            return params
        }
    }

    public struct Statuses_showParameter {

        // 需要获取的微博ID。
        var id: Int64

        func value() -> [String: Any] {
            var params: [String: Any] = [:]
            params["id"] = id
            return params
        }
    }

    public struct Statuses_user_timelineParameter {

        // 需要查询的用户ID。
        var uid: Int64?

        // 需要查询的用户昵称。
        var screen_name: String?

        // 若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。
        var since_id: Int64?

        // 若指定此参数，则返回ID小于或等于max_id的微博，默认为0。
        var max_id: Int64?

        // 单页返回的记录条数，最大不超过100，超过100以100处理，默认为20。
        var count: Int?

        // 返回结果的页码，默认为1。
        var page: Int?

        // 是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。
        var base_app: Int?

        // 过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。
        var feature: Int?

        // 返回值中user字段开关，0：返回完整user字段、1：user字段仅返回user_id，默认为0。
        var trim_user: Int?

        func value() -> [String: Any] {
            var params: [String: Any] = [:]
            if let uid = uid {
                params["uid"] = uid
            }
            if let screen_name = screen_name {
                params["screen_name"] = screen_name
            }
            if let since_id = since_id {
                params["since_id"] = since_id
            }
            if let max_id = max_id {
                params["max_id"] = max_id
            }
            if let count = count {
                params["count"] = count
            }
            if let page = page {
                params["page"] = page
            }
            if let base_app = base_app {
                params["base_app"] = base_app
            }
            if let feature = feature {
                params["feature"] = feature
            }
            if let trim_user = trim_user {
                params["trim_user"] = trim_user
            }
            return params
        }
    }
}