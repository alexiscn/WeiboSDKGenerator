//
//  APIGenerator.swift
//  WBSDKGenerator
//
//  Created by xu.shuifeng on 2018/4/11.
//  Copyright Â© 2018 shuifeng.me. All rights reserved.
//

import Foundation

class APIGenerator {
    
    let headerString = "// NOTE: This file is generated by WBSDKGenerator."
    
    let wbFunction: WBFunction
    
    init(wbFunction: WBFunction) {
        self.wbFunction = wbFunction
    }
    
    func generate() {
        
        let fileName = "WeiboSDK+\(wbFunction.category).swift"
        let fileURL = URL(fileURLWithPath: WBOutputDir.appending("/\(fileName)"))
        
        if !FileManager.default.fileExists(atPath: fileURL.path) {
            var body = ""
            body.append(headerString)
            body.append("\n\n")
            body.append("import GenericNetworking \n")
            body.append("\n")
            
            body.append("// MARK: - \(wbFunction.category) related API \n")
            body.append("extension WeiboSDK {\n")
            body.append("}")
            if let data = body.data(using: .utf8) {
                try? data.write(to: fileURL)
            }
        }
        
        guard var body = try? String(contentsOfFile: fileURL.path) else {
            return
        }
        body.removeLast()
        body.append("\n")
        body.append(generateFunc())
        body.append("}")
        if let data = body.data(using: .utf8) {
            try? data.write(to: fileURL)
        }
    }
    
    func generateFunc() -> String {
        
        var content = ""
        content.append("    /// \(wbFunction.description)\n")
        content.append("    ///\n")
        content.append("    /// - Parameters:\n")
        for param in wbFunction.parameters {
            content.append("    ///   - \(param.name): \(param.description)\n")
        }
        content.append("    ///   - completion: Callback\n")
        content.append("    ")
        content.append("public class func \(wbFunction.signature)(")
        
        for param in wbFunction.parameters {
            content.append(param.name)
            content.append(": ")
            content.append(swiftTypeFor(param.type))
            if param.optional {
                content.append("?")
            }
            content.append(", ")
        }
        content.append("completion: @escaping GenericNetworkingCompletion<Int>")
        content.append(") {\n")
        content.append("        let path = \"\(wbFunction.path)\"\n")
        content.append("        var params: [String: Any] = [:]\n")
        for param in wbFunction.parameters {
            if param.optional {
                content.append("        if let \(param.name) = \(param.name) {\n")
                content.append("            params[\"\(param.name)\"] = \(param.name)\n")
                content.append("        }\n")
            } else {
                content.append("        params[\"\(param.name)\"] = \(param.name)\n")
            }
        }
        content.append("        GenericNetworking.getJSON(path: path, parameters: params, completion: completion)\n")
        content.append("    ")
        content.append("}\n")
        return content
    }
}
