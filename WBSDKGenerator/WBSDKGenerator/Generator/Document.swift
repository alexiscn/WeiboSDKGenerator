//
//  Document.swift
//  WBSDKGenerator
//
//  Created by xu.shuifeng on 2018/4/11.
//  Copyright Â© 2018 shuifeng.me. All rights reserved.
//

import Foundation

enum DocumentMeta {
    case `func`
    case `class`
    case `struct`
    case `extension`
}

struct DocumentLine {
    let content: String
    let indent: Indent
    
    var newLine: DocumentLine {
        return DocumentLine(content: "\n", indent: .level0)
    }
    
    func text() -> String {
        return indent.rawValue + content + "\n"
    }
}

class Document {
    
    let headerString = "// NOTE: This file is generated by WBSDKGenerator."
    
    static let ParameterFolderName = "ParameterModels"
    
    static let ResponseFolderName = "ResponseModels"
    
    let wbFunction: WBFunction
    
    init(wbFunction: WBFunction) {
        self.wbFunction = wbFunction
    }
    
    func generate() {
        createParameterDocument()
        createSDKDocument()
    }
}

// create Request Parameter Model
extension Document {
    
    fileprivate func createParameterDocument() {
        
        if wbFunction.parameters.count == 0 {
            return
        }
        
        let fileName = "\(wbFunction.category)Parameter.swift"
        let filePath = WBOutputDir.appending("/\(Document.ParameterFolderName)/\(fileName)")
        let fileURL = URL(fileURLWithPath: filePath)
        if !FileManager.default.fileExists(atPath: fileURL.path) {
            var body = ""
            body.append(headerString)
            body.append("\n\n")
            body.append("extension WBParameter {\n")
            
            body.append("    public struct \(wbFunction.category) {\n")
            
            body.append("    }\n")
            body.append("}")
            if let data = body.data(using: .utf8) {
                try? data.write(to: fileURL)
            }
        }
        
        guard var body = try? String(contentsOfFile: fileURL.path) else {
            return
        }
        
        for _ in 0...6 {
            body.removeLast()
        }
    
        body.append("\n")
        body.append(parameterMembers())
        body.append("    }\n")
        body.append("}")
        if let data = body.data(using: .utf8) {
            try? data.write(to: fileURL)
        }
    }
    
    fileprivate func parameterMembers() -> String {
        
        var content = ""
        content.append("        public class \(wbFunction.signature): NSObject {\n\n")
        for param in wbFunction.parameters {
            content.append("            // \(param.description)\n")
            content.append("            public var ")
            content.append("\(param.name): \(swiftTypeFor(param.type))")
            if param.optional {
                content.append("?")
            }
            content.append("\n")
            content.append("\n")
        }
        
        let initialProperties = wbFunction.parameters.filter({ return $0.optional == false })
        if initialProperties.count > 0 {
            content.append("            public init(")
            for property in initialProperties {
                content.append("\(property.name): \(swiftTypeFor(property.type)), ")
            }
            content.removeLast()
            content.removeLast()
            content.append(") {\n")
            for property in initialProperties {
                content.append("                self.\(property.name) = \(property.name)\n ")
            }
            content.append("            }\n")
        }
        
        // create value function for request parameter
        content.append("            func value() -> [String: Any] {\n")
        content.append("                var params: [String: Any] = [:]\n")
        for param in wbFunction.parameters {
            if param.optional {
                content.append("                if let \(param.name) = \(param.name) {\n")
                content.append("                    params[\"\(param.name)\"] = \(param.name)\n")
                content.append("                }\n")
            } else {
                content.append("                params[\"\(param.name)\"] = \(param.name)\n")
            }
        }
        content.append("                return params\n")
        content.append("            }\n")
        
        content.append("        }\n")
        return content
    }
}

// create WeiboSDK+(categroy).swfit
extension Document {
    
    fileprivate func createSDKDocument() {
        let fileName = "WeiboSDK+\(wbFunction.category).swift"
        let filePath = WBOutputDir.appending("/\(fileName)")
        let fileURL = URL(fileURLWithPath: filePath)
        if !FileManager.default.fileExists(atPath: filePath) {
            var body = ""
            body.append(headerString)
            body.append("\n\n")
            body.append("import GenericNetworking \n")
            body.append("\n")
            
            body.append("// MARK: - \(wbFunction.category) related API \n")
            body.append("extension WeiboSDK {\n")
            body.append("\n")
            body.append("    public struct \(wbFunction.category) {\n")
            body.append("    }\n")
            body.append("}")
            if let data = body.data(using: .utf8) {
                try? data.write(to: fileURL)
            }
        }
        guard var body = try? String(contentsOfFile: fileURL.path) else {
            return
        }
        for _ in 0...6 {
            body.removeLast()
        }
        
        body.append("\n")
        body.append(weiboMethod())
        body.append("    }\n")
        body.append("}")
        if let data = body.data(using: .utf8) {
            try? data.write(to: fileURL)
        }
    }
    
    func weiboMethod() -> String {
        var content = ""
        content.append("        /// \(wbFunction.description)\n")
        content.append("        ///\n")
        content.append("        /// - Parameters:\n")
        
        let type = "WBParameter.\(wbFunction.category).\(wbFunction.signature)"
        if wbFunction.parameters.count > 0 {
            content.append("        ///   - \(wbFunction.signature): Refer `\(type)` to see more details. \n")
        }
        content.append("        ///   - completion: Callback\n")
        content.append("        ")
        content.append("public static func \(wbFunction.signature.lowercaseFirstLetter())(")
        if wbFunction.parameters.count > 0 {
            
            content.append("param: \(type),")
        }
        content.append("completion: @escaping GenericNetworkingCompletion<Int>")
        content.append(") {\n")
        content.append("            let path = \"\(wbFunction.path)\"\n")
        if wbFunction.parameters.count == 0 {
            content.append("            let params: [String: Any] = [:]\n")
        } else {
            content.append("            let params = param.value()\n")
        }
        switch wbFunction.method {
        case .GET:
            content.append("            GenericNetworking.getJSON(path: path, parameters: params, completion: completion)\n")
        case .POST:
            content.append("            GenericNetworking.postJSON(path: path, parameters: params, completion: completion)\n")
        }
        content.append("        }\n")
        return content
    }
    
}
