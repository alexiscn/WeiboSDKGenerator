//
//  Document.swift
//  WBSDKGenerator
//
//  Created by xu.shuifeng on 2018/4/11.
//  Copyright Â© 2018 shuifeng.me. All rights reserved.
//

import Foundation

let HeaderString = "// NOTE: This file is generated by WBSDKGenerator."

class Document {
    
    static let ParameterFolderName = "ParameterModels"
    
    static let ResponseFolderName = "ResponseModels"
    
    let api: WBApi
    
    init(api: WBApi) {
        self.api = api
    }
    
    func generate() {
        createParameterDocument()
        createSDKDocument()
    }
}

// create Request Parameter Model
extension Document {
    
    fileprivate func createParameterDocument() {
        if api.parameters.count == 0 {
            return
        }
        let fileName = "\(api.category)Parameter.swift"
        let filePath = WBOutputDir.appending("/\(Document.ParameterFolderName)/\(fileName)")
        let fileURL = URL(fileURLWithPath: filePath)
        var lines: [Line] = []
        if !FileManager.default.fileExists(atPath: fileURL.path) {
            lines.append(Line(content: HeaderString, indent: .level0))
            lines.append(Line.newLine)
            lines.append(Line(content: "extension WBParameter {", indent: .level0))
            lines.append(Line(content: "public struct \(api.category) {", indent: .level1))
            lines.append(Line(content: "}", indent: .level1))
            lines.append(Line(content: "}", indent: .level0))
        } else {
            guard let body = try? String(contentsOfFile: fileURL.path) else {
                return
            }
            lines = body.toLines()
        }
        lines.removeLast()
        lines.removeLast()
        lines.append(contentsOf: parameterMembers())
        lines.append(Line(content: "}", indent: .level1))
        lines.append(Line(content: "}", indent: .level0))
        
        var body = ""
        lines.forEach({ body += $0.text() })
        if let data = body.data(using: .utf8) {
            try? data.write(to: fileURL)
        }
    }
    
    fileprivate func parameterMembers() -> [Line] {
        var lines: [Line] = []
        lines.append(Line.newLine)
        lines.append(Line(content: "public class \(api.signature): NSObject {", indent: .level2))
        lines.append(Line.newLine)
        for param in api.parameters {
            lines.append(Line(content: "// \(param.description)", indent: .level3))
            var declaration = "public var \(param.name): \(swiftTypeFor(param.type))"
            if param.optional {
                declaration += "?"
            }
            lines.append(Line(content: declaration, indent: .level3))
        }
        
        let initialProperties = api.parameters.filter({ return $0.optional == false })
        if initialProperties.count > 0 {
            lines.append(Line.newLine)
            var initFunction = "public init("
            for property in initialProperties {
                initFunction.append("\(property.name): \(swiftTypeFor(property.type)), ")
            }
            initFunction.removeLast()
            initFunction.removeLast()
            initFunction.append(") {")
            lines.append(Line(content: initFunction, indent: .level3))
            for property in initialProperties {
                lines.append(Line(content: "self.\(property.name) = \(property.name)", indent: .level4))
            }
            lines.append(Line(content: "}", indent: .level3))
        }
        lines.append(Line.newLine)
        lines.append(Line(content: "func value() -> [String: Any] {", indent: .level3))
        lines.append(Line(content: "var params: [String: Any] = [:]", indent: .level4))
        for param in api.parameters {
            if param.optional {
                lines.append(Line(content: "if let \(param.name) = \(param.name) {", indent: .level4))
                lines.append(Line(content: "params[\"\(param.name)\"] = \(param.name)", indent: .level5))
                lines.append(Line(content: "}", indent: .level4))
                
            } else {
                lines.append(Line(content: "params[\"\(param.name)\"] = \(param.name)", indent: .level4))
            }
        }
        lines.append(Line(content: "return params", indent: .level4))
        lines.append(Line(content: "}", indent: .level3))
        lines.append(Line(content: "}", indent: .level2))
        return lines
    }
}

// create WeiboSDK+(categroy).swfit
extension Document {
    
    fileprivate func createSDKDocument() {
        let fileName = "WeiboSDK+\(api.category).swift"
        let filePath = WBOutputDir.appending("/\(fileName)")
        let fileURL = URL(fileURLWithPath: filePath)
        
        var lines: [Line] = []
        if !FileManager.default.fileExists(atPath: filePath) {
            lines.append(Line(content: HeaderString, indent: .level0))
            lines.append(Line.newLine)
            lines.append(Line(content: "import GenericNetworking", indent: .level0))
            lines.append(Line.newLine)
            lines.append(Line(content: "// MARK: - \(api.category) Related API", indent: .level0))
            lines.append(Line(content: "extension WeiboSDK {", indent: .level0))
            lines.append(Line.newLine)
            lines.append(Line(content: "public struct \(api.category) {", indent: .level1))
            lines.append(Line(content: "}", indent: .level1))
            lines.append(Line(content: "}", indent: .level0))
        } else {
            guard let body = try? String(contentsOfFile: fileURL.path) else {
                return
            }
            lines = body.toLines()
        }
        
        lines.removeLast()
        lines.removeLast()
        
        lines.append(Line.newLine)
        lines.append(contentsOf: weiboMethod())
        lines.append(Line(content: "}", indent: .level1))
        lines.append(Line(content: "}", indent: .level0))
        
        var body = ""
        lines.forEach({ body += $0.text() })
        if let data = body.data(using: .utf8) {
            try? data.write(to: fileURL)
        }
    }
    
    func weiboMethod() -> [Line] {
        var lines: [Line] = []
        lines.append(Line(content: "///\(api.description)", indent: .level2))
        lines.append(Line(content: "///", indent: .level2))
        lines.append(Line(content: "/// - Parameters:", indent: .level2))
        let type = "WBParameter.\(api.category).\(api.signature)"
        if api.parameters.count > 0 {
            lines.append(Line(content: "///   - param: Refer `\(type)` to see more details. ", indent: .level2))
        }
        lines.append(Line(content: "///   - completion: Callback", indent: .level2))
        
        var signature = "public static func \(api.signature.lowercaseFirstLetter())("
        if api.parameters.count > 0 {
            signature.append("param: \(type), ")
        }
        signature.append("completion: @escaping GenericNetworkingCompletion<Int>) {")
        lines.append(Line(content: signature, indent: .level2))
        
        // append body
        lines.append(Line(content: "let path = \"\(api.path)\"", indent: .level3))
        if api.parameters.count == 0 {
            lines.append(Line(content: "var params: [String: Any] = [:]", indent: .level3))
        } else {
            lines.append(Line(content: "var params = param.value()", indent: .level3))
        }
        // append access token
        lines.append(Line(content: "if let token = WeiboSDK.accessToken {", indent: .level3))
        lines.append(Line(content: "params[\"access_token\"] = token", indent: .level4))
        lines.append(Line(content: "}", indent: .level3))
        
        switch api.method {
        case .GET:
            lines.append(Line(content: "GenericNetworking.getJSON(path: path, parameters: params, completion: completion)", indent: .level3))
        case .POST:
            lines.append(Line(content: "GenericNetworking.postJSON(path: path, parameters: params, completion: completion)", indent: .level3))
        }
        lines.append(Line(content: "}", indent: .level2))
        return lines
    }
    
}
